{"version":3,"sources":["filters/data.ts","filters/checkbox.tsx","icons/hide.tsx","icons/show.tsx","filters/filter.tsx","filters/index.tsx","results/bargraph.tsx","utils.js","results/result.tsx","results/surveyResponse.tsx","results/index.tsx","AppWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colorsObj","Druid","Hunter","Mage","Paladin","Priest","Rogue","Shaman","Warlock","Warrior","DK","DH","Monk","alt1","alt2","specColors","_specColors","Object","defineProperty","data","answers","timestamp","naxx_interest","naxx_cont_class_choice","should_people_roll_different_spec","which_raids_interest","plan_to_take_break","character_name","tryhard_rating","tryhard_rating_explaination","ideal_spec_choices","ideal_prof_choices","secondary_spec_choices","loot_systems_okay_with","ideal_loot_system","raid_days_per_week_count","raid_day_time_slots","interested_in_raid_leading","content_interests","leadership_interests","tbc_guild_wants","tbc_guild_concerns","colors","colorBlindColors","factions","_factions","hasOthers","questions","factionRaces","_factionRaces","_ForTheHorde","Human","Dwarf","_ForTheAlliance","races","_races","titles","Checkbox","props","_this","classCallCheck","this","_super","call","displayName","startOnSelect","bind","assertThisInitialized","react","className","style","onClick","backgroundColor","isSelected","isColorBlind","role","answer","e","onSelect","type","React","hide","_ref","_ref$fill","fill","size","react_default","a","createElement","version","id","x","y","width","height","viewBox","d","show","FilterComp","startScrollTo","startUpdate","_this2","_this$props","idx","selectedAnswers","title","Data","concat","questionIsShowing","map","checkbox_Checkbox","key","toggleAnswer","target","document","querySelector","scrollIntoView","behavior","updateQuestionsShowing","Filters","innerHeight","resetQuestionsShowing","question","filter_FilterComp","questionsShowing","clearFilter","applyFilter","updateColorBlind","transform","BarGraph","_getLargestNumber","getAnswerWidth","totalAnswers","largestNumber","reduce","curLargestNumber","value","topEndNumber","data-content","color","toFixed","DATA_URL","_callee","callback","_yield$Promise$all","_yield$Promise$all2","part1","regenerator_default","wrap","_context","prev","next","Promise","all","res","rej","req","XMLHttpRequest","onFail","event","Error","addEventListener","status","json","JSON","parse","responseText","open","send","sent","slicedToArray","toConsumableArray","stop","objectEntries","obj","entries","keys","Result","_this$_pullOtherAnswe","_pullOtherAnswersOut","answerCounts","_this$_pullOtherAnswe2","counts","otherCounts","state","showOtherAnswers","showResultDialogue","_isOtherAnswer","getColor","getChartType","renderBarGraph","renderPieChart","toggleResponseModal","_ref2","find","ans","_this3","_getCountsAsArray","_reduce","_ref3","_ref4","_ref5","answrs","othAnswrs","_ref6","push","length","_reduce2","prevProps","_this$_pullOtherAnswe3","_this$_pullOtherAnswe4","setState","_this4","hasOtherAnswers","_ref7","borderColor","_ref8","bargraph_BarGraph","label","labelPosition","labelStyle","fontSize","dist_default","labelProps","percent","dataIndex","percentage","textAnchor","alignmentBaseline","dx","dy","results_surveyResponse","_React$useState","response","_React$useState2","responseAsArr","updateAsArr","questionKey","subAnswers","split","subAnswer","answerText","Modal","setAppElement","src_results","updateShowResultDialogue","_React$useState3","undefined","_React$useState4","surveyResponse","updateSurveyResponse","filtersLength","activeFilters","characterNames","filter","name","computedResponsesLength","allResponsesCount","catIdx","category","catFilters","updateFilterLive","result_Result","personName","responsesByPersonName","lib_default","isOpen","onRequestClose","contentLabel","QUESTIONS_KEYS","answersBlank","accum","defaultShowingQuestions","Wrapper","objectSpread","_calcAnswerQuantities","filtering","window","isMobile","innerWidth","loaded","responses","showFilters","_filterResults","_getAnswersTemplate","toggleAnswerFilter","updateQuestionShowing","forEach","q","results","item","faction","class","race","_x","_getSurveyData","apply","arguments","getSurveyData","error","failedToLoad","filteredResps","resp","timeoutID","clearTimeout","setTimeout","_this5","_getSurveyResults","_this6","removeEventListener","_this7","filters_Filters","_this8","questionsWithFilters","getFilters","computedResponses","getFilteredResponses","filteredAnswers","_ref9","filters","every","_ref11","_ref12","some","selectedAnswer","includes","updatedSection","_this9","App","AppWrapper_Wrapper","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWA4EMA,EAAY,CAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,MAAO,UACPC,OAAQ,UACRC,QAAS,UACTC,QAAS,UACTC,GAAI,UACJC,GAAI,UACJC,KAAM,UACNC,KAAM,SACNC,KAAM,kBAGFC,GAAUC,EAAA,GAAAC,OAAAC,EAAA,EAAAD,CAAAD,EACb,uBAAyB,WADZC,OAAAC,EAAA,EAAAD,CAAAD,EAET,YAAc,WAFLC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,QAGH,WAHGC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,OAIJ,WAJIC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,SAKF,WALEC,OAAAC,EAAA,EAAAD,CAAAD,EAMT,gBAAkB,WANTC,OAAAC,EAAA,EAAAD,CAAAD,EAOT,aAAe,WAPNC,OAAAC,EAAA,EAAAD,CAAAD,EAQT,YAAc,WARLC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,UASD,WATCC,OAAAC,EAAA,EAAAD,CAAAD,EAUT,gBAAkB,WAVTC,OAAAC,EAAA,EAAAD,CAAAD,EAWT,sBAAwB,WAXfC,OAAAC,EAAA,EAAAD,CAAAD,EAYT,SAAW,WAZFC,OAAAC,EAAA,EAAAD,CAAAD,EAaT,uBAAyB,WAbhBC,OAAAC,EAAA,EAAAD,CAAAD,EAcT,qBAAuB,WAddC,OAAAC,EAAA,EAAAD,CAAAD,EAeT,iBAAmBhB,EAAUO,QAfpBU,OAAAC,EAAA,EAAAD,CAAAD,EAAA,YAgBChB,EAAUO,QAhBXU,OAAAC,EAAA,EAAAD,CAAAD,EAAA,cAiBGhB,EAAUO,QAjBbU,OAAAC,EAAA,EAAAD,CAAAD,EAkBT,iBAAmB,WAlBVC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,cAmBG,WAnBHC,OAAAC,EAAA,EAAAD,CAAAD,EAoBT,uBAAyB,WApBhBC,OAAAC,EAAA,EAAAD,CAAAD,EAqBT,gBAAkB,WArBTC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,WAsBA,WAtBAC,OAAAC,EAAA,EAAAD,CAAAD,EAAA,WAuBA,WAvBAA,GAiGDG,EAAA,CACbC,QAAS,CACPC,UAAW,CAAC,IACZC,cAAe,CACb,IACA,IACA,KAEFC,uBAAwB,CACtB,yEACA,SAEFC,kCAAmC,CACjC,qBACA,sCACA,6FAEFC,qBAAsB,CACpB,cACA,iBACA,YACA,OACA,OACA,aAEFC,mBAAoB,CAAC,IACrBC,eAAgB,CAAC,IACjBC,eAAgB,CACd,IACA,IACA,IACA,IACA,KAEFC,4BAA6B,CAAC,IAC9BC,mBAAoB,CAClB,uBACA,YACA,QACA,OACA,SACA,gBACA,aACA,YACA,UACA,gBACA,sBACA,SACA,uBACA,qBACA,iBACA,YACA,cACA,iBACA,cACA,uBACA,gBACA,WACA,YAEFC,mBAAoB,CAClB,YACA,iBACA,gBACA,YACA,WACA,SACA,cACA,gBACA,UACA,cAEFC,uBAAwB,CACtB,uBACA,YACA,QACA,OACA,SACA,gBACA,aACA,YACA,UACA,gBACA,sBACA,SACA,uBACA,qBACA,iBACA,YACA,cACA,iBACA,cACA,uBACA,gBACA,WACA,YAEFC,uBAAwB,CACtB,2CACA,eACA,MACA,SAEFC,kBAAmB,CACjB,2CACA,eACA,MACA,SAEFC,yBAA0B,CACxB,IACA,IACA,MAEFC,oBAAqB,CACnB,mBACA,oBACA,sBACA,wBACA,mBACA,qBACA,uBACA,qBACA,mBACA,qBACA,oBAEFC,2BAA4B,CAC1B,MACA,MAEFC,kBAAmB,CACjB,UACA,kBACA,WACA,aACA,8CACA,4BACA,0BACA,sCAEFC,qBAAsB,CACpB,UACA,eACA,gCACA,SAEFC,gBAAiB,CACf,IAEFC,mBAAoB,CAClB,KAGJC,OAxVa,CACb,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,WAgTAC,iBA7SuB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UAEA,UACA,U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","file":"static/js/main.2d612f7f.chunk.js","sourcesContent":["const colors = [\n  \"#C0392B\", // dark-red\n  \"#2980B9\", // dark-blue\n  \"#9B59B6\", // dark-purple\n  \"#D35400\", // dark-orange\n  \"#1E8449\", // Dark Green\n  // \"#D4AC0D\", // Lighter Dark Yellow\n  \"#B7950B\", // Dark Yellow\n  \"#D98880\", // light-red\n  \"#7FB3D5\", // light-blue\n  \"#C39BD3\", // light-purple\n  \"#F0B27A\", // light-orange\n  \"#7DCEA0\", // light-green\n  \"#B3B6B7\", // light-grey\n\n  \"#C0392B\", // dark-red\n  \"#2980B9\", // dark-blue\n  \"#9B59B6\", // dark-purple\n  \"#D35400\", // dark-orange\n  \"#1E8449\", // Dark Green\n  // \"#D4AC0D\", // Lighter Dark Yellow\n  \"#B7950B\", // Dark Yellow\n  \"#D98880\", // light-red\n  \"#7FB3D5\", // light-blue\n  \"#C39BD3\", // light-purple\n  \"#F0B27A\", // light-orange\n  \"#7DCEA0\", // light-green\n  \"#B3B6B7\", // light-grey\n\n  \"#C0392B\", // dark-red\n  \"#2980B9\", // dark-blue\n  \"#9B59B6\", // dark-purple\n  \"#D35400\", // dark-orange\n  \"#1E8449\", // Dark Green\n  // \"#D4AC0D\", // Lighter Dark Yellow\n  \"#B7950B\", // Dark Yellow\n  \"#D98880\", // light-red\n  \"#7FB3D5\", // light-blue\n  \"#C39BD3\", // light-purple\n  \"#F0B27A\", // light-orange\n  \"#7DCEA0\", // light-green\n  \"#B3B6B7\" // light-grey\n];\n\nconst colorBlindColors = [\n  \"#154360\",\n  \"#1A5276\",\n  \"#1F618D\",\n  \"#1F618D\",\n  \"#2980B9\",\n  \"#5499C7\",\n  \"#5DADE2\",\n  \"#7FB3D5\",\n  \"#85C1E9\",\n  \n  \"#154360\",\n  \"#1A5276\",\n  \"#1F618D\",\n  \"#1F618D\",\n  \"#2980B9\",\n  \"#5499C7\",\n  \"#5DADE2\",\n  \"#7FB3D5\",\n  \"#85C1E9\",\n  \n  \"#154360\",\n  \"#1A5276\",\n  \"#1F618D\",\n  \"#1F618D\",\n  \"#2980B9\",\n  \"#5499C7\",\n  \"#5DADE2\",\n  \"#7FB3D5\",\n  \"#85C1E9\",\n];\n\nconst colorsObj = {\n  Druid: \"#FF7D0A\",\n  Hunter: \"#ABD473\",\n  Mage: \"#40C7EB\",\n  Paladin: \"#F58CBA\",\n  Priest: \"#858585\",\n  Rogue: \"#F1C40F\",\n  Shaman: \"#0070DE\",\n  Warlock: \"#8787ED\",\n  Warrior: \"#C79C6E\",\n  DK: \"#C41F3B\",\n  DH: \"#A330C9\",\n  Monk: \"#00FF96\",\n  alt1: \"tomato\",\n  alt2: \"blanchedalmond\"\n};\n\nconst specColors = {\n  [\"Protection (Warrior)\"]: \"#C79C6E\",\n      [\"Arms/Fury\"]: \"#C79C6E\",\n      Frost: \"#40C7EB\",\n      Fire: \"#40C7EB\",\n      Arcane: \"#40C7EB\",\n      [\"Resto (Druid)\"]: \"#FF7D0A\",\n      [\"Feral Tank\"]: \"#FF7D0A\",\n      [\"Feral DPS\"]: \"#FF7D0A\",\n      Balance: \"#FF7D0A\",\n      [\"Holy (Priest)\"]: \"#858585\",\n      [\"Discipline (Priest)\"]: \"#858585\",\n      [\"Shadow\"]: \"#858585\",\n      [\"Warlock PvE DPS spec\"]: \"#8787ED\",\n      [\"Rogue PvE DPS spec\"]: \"#F1C40F\",\n      [\"Resto (Shaman)\"]: colorsObj.Shaman,\n      Elemental: colorsObj.Shaman,\n      Enhancement: colorsObj.Shaman,\n      [\"Holy (Paladin)\"]: \"#F58CBA\",\n      Retribution: \"#F58CBA\",\n      [\"Protection (Paladin)\"]: \"#F58CBA\",\n      [\"Beast Mastery\"]: \"#ABD473\",\n      Survival: \"#ABD473\",\n      Marksman: \"#ABD473\"\n};\n\nconst questions = [\n  // \"timestamp\",\n    \"naxx_interest\",\n    \"naxx_cont_class_choice\",\n    \"should_people_roll_different_spec\",\n    \"which_raids_interest\",\n    \"plan_to_take_break\",\n    \"character_name\",\n    \"tryhard_rating\",\n    \"tryhard_rating_explaination\",\n    \"ideal_spec_choices\",\n    \"ideal_prof_choices\",\n    \"secondary_spec_choices\",\n    \"loot_systems_okay_with\",\n    \"ideal_loot_system\",\n    \"raid_days_per_week_count\",\n    \"raid_day_time_slots\",\n    \"interested_in_raid_leading\",\n    \"content_interests\",\n    \"leadership_interests\",\n    \"tbc_guild_wants\",\n    \"tbc_guild_concerns\"\n];\n\nconst hasOthers: { [x: string]: boolean; } = {\n  naxx_interest: false,\n  naxx_cont_class_choice: true,\n  should_people_roll_different_spec: false,\n  which_raids_interest: false,\n  plan_to_take_break: true,\n  character_name: true,\n  tryhard_rating: false,\n  tryhard_rating_explaination: true,\n  ideal_spec_choices: false,\n  ideal_prof_choices: false,\n  secondary_spec_choices: false,\n  loot_systems_okay_with: true,\n  ideal_loot_system: true,\n  raid_days_per_week_count: false,\n  raid_day_time_slots: false,\n  interested_in_raid_leading: false,\n  content_interests: false,\n  leadership_interests: true,\n  tbc_guild_wants: true,\n  tbc_guild_concerns: true\n};\n\nconst titles: { [x: string]: string } = {\n  // timestamp: \"\",\n  naxx_interest: \"How interested are you in continuing to raid Naxxramas?\",\n  naxx_cont_class_choice: \"If at all interested in continuing to raid Naxxramas, what character setup would you want to raid as? (If different Class/Spec list which which Class/Spec combo in Other)\",\n  should_people_roll_different_spec: \"What is your initial reaction to the idea of People being able to change their \\\"Main Spec\\\", and in extension roll as \\\"Main Spec\\\" on items to be used in PrePatch and/or TBC? (i.e. a Resto Shaman rolling on Enhancement Gear as Main Spec in prep for TBC, etc.)\",\n  which_raids_interest: \"Regardless of your answer to the above 2 questions, which Raids would you be interested in running on a consistent basis during Pre-Patch gear up yourself and others new Mains for TBC?\",\n  plan_to_take_break: \"Do you plan on taking a break from WoW Classic before the Dark Portal opens?\",\n  character_name: \"Your current player name? (that we would know you by: i.e., Frugo, Colossus, Jooda, etc.)\",\n  tryhard_rating: \"Overall would you describe your PvE (Raiding) plans for TBC more as \\\"Tryhard/Focused\\\" or as \\\"Casual\\\"\",\n  tryhard_rating_explaination: \"If you wouldn't mind, please briefly explain your answer to the last question.\",\n  ideal_spec_choices: \"Ideally, what Specialization(s) (and in extension what class) do you want to Raid as? (Selecting multiple implies you would be equally interested in either)\",\n  ideal_prof_choices: \"Which Primary Professions do you intend to take on your main Raiding character (if it is your ideal class/spec)?\",\n  secondary_spec_choices: \"If you intend to have any other 70s you would be interested in raiding with (either in a 2nd raid group or less ideal choice for main raid), what Specialization(s) would you want to raid as?\",\n  loot_systems_okay_with: \"Which Loot systems are you comfortable with (select all you are comfortable with)\",\n  ideal_loot_system: \"Which Loot System Would you prefer most?\",\n  raid_days_per_week_count: \"How many days per week are you able and interested in raiding?\",\n  raid_day_time_slots: \"Which time slots are you available/willing to raid consistently? (times below should be interpreted as Server Time; PST/PDT)\",\n  interested_in_raid_leading: \"Are you interested in taking part in Raid Leading and/or helping out with Raid Organization?\",\n  content_interests: \"What content are you interested in\",\n  leadership_interests: \"If at all, what Leadership position(s) in <Little Dragons> are you interested in pursuing during TBC? (Leave blank if you are not interested in any)\",\n  tbc_guild_wants: \"What do you want out of the Guild in TBC?\",\n  tbc_guild_concerns: \"Any Concerns for the Guild in TBC? (Questions can be asked in Discord)\"\n};\n\nexport default {\n  answers: {\n    timestamp: [\"\"],\n    naxx_interest: [\n      \"1\",\n      \"2\",\n      \"3\"\n    ],\n    naxx_cont_class_choice: [\n      \"Current \\\"Main\\\" (who I've been raiding Naxx with), SAME specialization\",\n      \"Other\"\n    ],\n    should_people_roll_different_spec: [\n      \"Sounds good to me!\",\n      \"Yes, if there are some restrictions\",\n      \"No, people should only get to roll Main Spec with their current Role and Spec in the raid\"\n    ],\n    which_raids_interest: [\n      \"Molten Core\",\n      \"Blackwing Lair\",\n      \"Zul Gurub\",\n      \"AQ20\",\n      \"AQ40\",\n      \"Naxxramas\",\n    ],\n    plan_to_take_break: [\"\"],\n    character_name: [\"\"],\n    tryhard_rating: [\n      \"1\",\n      \"2\",\n      \"3\",\n      \"4\",\n      \"5\"\n    ],\n    tryhard_rating_explaination: [\"\"],\n    ideal_spec_choices: [\n      \"Protection (Warrior)\",\n      \"Arms/Fury\",\n      \"Frost\",\n      \"Fire\",\n      \"Arcane\",\n      \"Resto (Druid)\",\n      \"Feral Tank\",\n      \"Feral DPS\",\n      \"Balance\",\n      \"Holy (Priest)\",\n      \"Discipline (Priest)\",\n      \"Shadow\",\n      \"Warlock PvE DPS spec\",\n      \"Rogue PvE DPS spec\",\n      \"Resto (Shaman)\",\n      \"Elemental\",\n      \"Enhancement\",\n      \"Holy (Paladin)\",\n      \"Retribution\",\n      \"Protection (Paladin)\",\n      \"Beast Mastery\",\n      \"Survival\",\n      \"Marksman\"\n    ],\n    ideal_prof_choices: [\n      \"Tailoring\",\n      \"Leatherworking\",\n      \"Blacksmithing\",\n      \"Herbalism\",\n      \"Skinning\",\n      \"Mining\",\n      \"Engineering\",\n      \"Jewelcrafting\",\n      \"Alchemy\",\n      \"Enchanting\"\n    ],\n    secondary_spec_choices: [\n      \"Protection (Warrior)\",\n      \"Arms/Fury\",\n      \"Frost\",\n      \"Fire\",\n      \"Arcane\",\n      \"Resto (Druid)\",\n      \"Feral Tank\",\n      \"Feral DPS\",\n      \"Balance\",\n      \"Holy (Priest)\",\n      \"Discipline (Priest)\",\n      \"Shadow\",\n      \"Warlock PvE DPS spec\",\n      \"Rogue PvE DPS spec\",\n      \"Resto (Shaman)\",\n      \"Elemental\",\n      \"Enhancement\",\n      \"Holy (Paladin)\",\n      \"Retribution\",\n      \"Protection (Paladin)\",\n      \"Beast Mastery\",\n      \"Survival\",\n      \"Marksman\"\n    ],\n    loot_systems_okay_with: [\n      \"MS>OS (how we did it in Vanilla Classic)\",\n      \"Loot Council\",\n      \"DKP\",\n      \"Other\"\n    ],\n    ideal_loot_system: [\n      \"MS>OS (how we did it in Vanilla Classic)\",\n      \"Loot Council\",\n      \"DKP\",\n      \"Other\"\n    ],\n    raid_days_per_week_count: [\n      \"1\",\n      \"2\",\n      \"3+\"\n    ],\n    raid_day_time_slots: [\n      \"Monday (evening)\",\n      \"Tuesday (evening)\",\n      \"Wednesday (evening)\",\n      \"Thursdayday (evening)\",\n      \"Friday (evening)\",\n      \"Saturday (morning)\",\n      \"Saturday (afternoon)\",\n      \"Saturday (evening)\",\n      \"Sunday (morning)\",\n      \"Sunday (afternoon)\",\n      \"Sunday (evening)\",\n    ],\n    interested_in_raid_leading: [\n      \"Yes\",\n      \"No\",\n    ],\n    content_interests: [\n      \"Raiding\",\n      \"Heroic Dungeons\",\n      \"RP Event\",\n      \"PvP/Arenas\",\n      \"Playing the Auction House/Accumulating Gold\",\n      \"Perpetually Leveling Alts\",\n      \"Making/Playing \\\"Twinks\\\"\",\n      \"[ Unofficial ] Achievement Hunting\",\n    ],\n    leadership_interests: [\n      \"Officer\",\n      \"Class Leader\",\n      \"Loot Council (If such exists)\",\n      \"Other\"\n    ],\n    tbc_guild_wants: [\n      \"\"\n    ],\n    tbc_guild_concerns: [\n      \"\"\n    ]\n  },\n  colors,\n  colorBlindColors,\n  colorsObj,\n  factions: {\n    [\"For the Horde!\"]: {\n      Shaman: true,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: true,\n      Druid: true\n    },\n    [\"For the Alliance!\"]: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: true,\n      Warlock: true,\n      Hunter: true,\n      Druid: true\n    }\n  },\n  hasOthers,\n  questions,\n  factionRaces: {\n    [\"For the Horde!\"]: {\n      Human: false,\n      Dwarf: false,\n      [\"Night Elf\"]: false,\n      Gnome: false,\n      Orc: true,\n      Undead: true,\n      Tauren: true,\n      Troll: true\n    },\n    [\"For the Alliance!\"]: {\n      Human: true,\n      Dwarf: true,\n      [\"Night Elf\"]: true,\n      Gnome: true,\n      Orc: false,\n      Undead: false,\n      Tauren: false,\n      Troll: false\n    }\n  },\n  races: {\n    Human: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Dwarf: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: true,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    [\"Night Elf\"]: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    Gnome: {\n      Shaman: false,\n      Rogue: true,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Orc: {\n      Shaman: true,\n      Rogue: true,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: true,\n      Hunter: true,\n      Druid: false\n    },\n    Undead: {\n      Shaman: false,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: true,\n      Hunter: false,\n      Druid: false\n    },\n    Tauren: {\n      Shaman: true,\n      Rogue: false,\n      Priest: false,\n      Warrior: true,\n      Paladin: false,\n      Mage: false,\n      Warlock: false,\n      Hunter: true,\n      Druid: true\n    },\n    Troll: {\n      Shaman: true,\n      Rogue: true,\n      Priest: true,\n      Warrior: true,\n      Paladin: false,\n      Mage: true,\n      Warlock: false,\n      Hunter: true,\n      Druid: false\n    }\n  },\n  specColors,\n  titles\n};\n","import * as React from \"react\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  answer: string;\n  isSelected?: boolean;\n  isColorBlind: boolean;\n  onSelect: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  style?: React.CSSProperties;\n  type: keyof Survey.Response;\n}\n\ninterface State {}\n\nexport default class Checkbox extends React.Component<Props> {\n  public displayName = \"Checkbox\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.startOnSelect = this.startOnSelect.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"filters-filter-checkbox-cont\" style={this.props.style}>\n        <button\n          className=\"filters-filter-checkbox\"\n          onClick={this.startOnSelect}\n          style={{\n            backgroundColor: this.props.isSelected\n              ? this.props.isColorBlind\n                ? \"#1F618D\"\n                : \"#F1C40F\"\n              : \"transparent\"\n          }}\n        />\n\n        <label\n          className=\"filters-filter-checkbox-answer-text\"\n          role=\"button\"\n          onClick={this.startOnSelect}\n        >\n          {this.props.answer}\n        </label>\n      </div>\n    );\n  }\n\n  startOnSelect(\n    e:\n      | React.SyntheticEvent<HTMLButtonElement>\n      | React.MouseEvent<HTMLLabelElement, MouseEvent>\n  ) {\n    this.props.onSelect(\n      this.props.answer,\n      !!this.props.isSelected,\n      this.props.type\n    );\n  }\n}\n","import React from \"react\";\n\ninterface Props {\n  fill?: string;\n  size: number;\n}\n\nexport default ({ fill = \"black\", size }: Props) => {\n  return (\n    <svg\n      version=\"1.1\"\n      id=\"Capa_1\"\n      x=\"0px\"\n      y=\"0px\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 59.049 59.049\"\n      fill={fill}\n    >\n      <g>\n        <path\n          d=\"M11.285,41.39c0.184,0.146,0.404,0.218,0.623,0.218c0.294,0,0.585-0.129,0.783-0.377c0.344-0.432,0.273-1.061-0.159-1.405\n\t\tc-0.801-0.638-1.577-1.331-2.305-2.06l-7.398-7.398l7.629-7.629c7.334-7.333,18.003-9.836,27.839-6.534\n\t\tc0.523,0.173,1.09-0.107,1.267-0.63c0.175-0.523-0.106-1.091-0.63-1.267c-10.562-3.545-22.016-0.857-29.89,7.016L0,30.368\n\t\tl8.812,8.812C9.593,39.962,10.426,40.705,11.285,41.39z\"\n        />\n        <path\n          d=\"M50.237,21.325c-1.348-1.348-2.826-2.564-4.394-3.616c-0.458-0.307-1.081-0.185-1.388,0.273\n\t\tc-0.308,0.458-0.185,1.08,0.273,1.388c1.46,0.979,2.838,2.113,4.094,3.369l7.398,7.398l-7.629,7.629\n\t\tc-7.385,7.385-18.513,9.882-28.352,6.356c-0.52-0.187-1.093,0.084-1.279,0.604c-0.186,0.52,0.084,1.092,0.604,1.279\n\t\tc3.182,1.14,6.49,1.693,9.776,1.693c7.621,0,15.124-2.977,20.665-8.518l9.043-9.043L50.237,21.325z\"\n        />\n        <path\n          d=\"M30.539,41.774c-2.153,0-4.251-0.598-6.07-1.73c-0.467-0.29-1.084-0.148-1.377,0.321c-0.292,0.469-0.148,1.085,0.321,1.377\n\t\tc2.135,1.33,4.6,2.032,7.126,2.032c7.444,0,13.5-6.056,13.5-13.5c0-2.685-0.787-5.279-2.275-7.502\n\t\tc-0.308-0.459-0.93-0.582-1.387-0.275c-0.459,0.308-0.582,0.929-0.275,1.387c1.267,1.893,1.937,4.102,1.937,6.39\n\t\tC42.039,36.616,36.88,41.774,30.539,41.774z\"\n        />\n        <path\n          d=\"M30.539,18.774c2.065,0,4.089,0.553,5.855,1.6c0.474,0.281,1.088,0.125,1.37-0.351c0.281-0.475,0.125-1.088-0.351-1.37\n\t\tc-2.074-1.229-4.451-1.879-6.875-1.879c-7.444,0-13.5,6.056-13.5,13.5c0,2.084,0.462,4.083,1.374,5.941\n\t\tc0.174,0.354,0.529,0.56,0.899,0.56c0.147,0,0.298-0.033,0.439-0.102c0.496-0.244,0.701-0.843,0.458-1.338\n\t\tc-0.776-1.582-1.17-3.284-1.17-5.06C19.039,23.933,24.198,18.774,30.539,18.774z\"\n        />\n        <path\n          d=\"M54.621,5.567c-0.391-0.391-1.023-0.391-1.414,0l-46.5,46.5c-0.391,0.391-0.391,1.023,0,1.414\n\t\tc0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293l46.5-46.5C55.012,6.591,55.012,5.958,54.621,5.567z\"\n        />\n      </g>\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n    </svg>\n  );\n};\n","import React from \"react\";\n\ninterface Props {\n  fill?: string;\n  size: number;\n}\n\nexport default ({ fill = \"black\", size }: Props) => {\n  return (\n    <svg\n      version=\"1.1\"\n      id=\"Capa_1\"\n      x=\"0px\"\n      y=\"0px\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 59.2 59.2\"\n      fill={fill}\n    >\n      <g>\n        <path\n          d=\"M51.062,21.561c-11.889-11.889-31.232-11.889-43.121,0L0,29.501l8.138,8.138c5.944,5.944,13.752,8.917,21.561,8.917\n                s15.616-2.972,21.561-8.917l7.941-7.941L51.062,21.561z M49.845,36.225c-11.109,11.108-29.184,11.108-40.293,0l-6.724-6.724\n                l6.527-6.527c11.109-11.108,29.184-11.108,40.293,0l6.724,6.724L49.845,36.225z\"\n        />\n        <path\n          d=\"M28.572,21.57c-3.86,0-7,3.14-7,7c0,0.552,0.448,1,1,1s1-0.448,1-1c0-2.757,2.243-5,5-5c0.552,0,1-0.448,1-1\n                S29.125,21.57,28.572,21.57z\"\n        />\n        <path\n          d=\"M29.572,16.57c-7.168,0-13,5.832-13,13s5.832,13,13,13s13-5.832,13-13S36.741,16.57,29.572,16.57z M29.572,40.57\n                c-6.065,0-11-4.935-11-11s4.935-11,11-11s11,4.935,11,11S35.638,40.57,29.572,40.57z\"\n        />\n      </g>\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n      <g />\n    </svg>\n  );\n};\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Checkbox from \"./checkbox\";\nimport { Survey } from \"../typings\";\n\nimport HideIcon from \"../icons/hide\";\nimport ShowIcon from \"../icons/show\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  questionIsShowing: boolean;\n  selectedAnswers: {\n    [x: string]: boolean;\n  };\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  type: keyof Survey.Response;\n  updateQuestionsShowing: (question: string) => void;\n}\n\ninterface State {}\n\nexport default class FilterComp extends React.Component<Props, State> {\n  public displayName = \"FilterComp\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.startScrollTo = this.startScrollTo.bind(this)\n    this.startUpdate = this.startUpdate.bind(this);\n  }\n\n  render() {\n    const { idx, selectedAnswers, type } = this.props;\n    const title = Data.titles[type];\n    const answers = (Data.answers as { [x: string]: string[] })[type];\n\n    return (\n      <div className=\"filters-filter-cont\">\n        <h4 className=\"filters-filter-title\">\n          <span\n            className={`filters-filter-title-text${\n              this.props.questionIsShowing ? \"\" : \" is-not-showing\"\n            }`}\n            role=\"button\"\n            onClick={() => this.startScrollTo(type)}\n          >\n            {idx}. {title}?{\" \"}\n          </span>\n          <button\n            className=\"filters-filter-title-showing-button\"\n            onClick={this.startUpdate}\n          >\n            {this.props.questionIsShowing ? (\n              <ShowIcon fill=\"black\" size={16} />\n            ) : (\n              <HideIcon fill=\"black\" size={16} />\n            )}\n          </button>\n        </h4>\n\n        {answers &&\n          answers.map((answer: string) => (\n            <Checkbox\n              answer={answer}\n              isColorBlind={this.props.isColorBlind}\n              isSelected={!!selectedAnswers[answer]}\n              key={answer}\n              onSelect={this.props.toggleAnswer}\n              type={this.props.type}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  startScrollTo(key: keyof Survey.Response) {\n    if (key) {\n      const target = document.querySelector(`#${key}`);\n\n      if (target) {\n        target.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  }\n\n  startUpdate() {\n    this.props.updateQuestionsShowing(this.props.type);\n  }\n}\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Filter from \"./filter\";\nimport { FilterTypes, Survey } from \"../typings\";\nimport Checkbox from \"./checkbox\";\n\nimport \"./styles.scss\";\n\ninterface Props {\n  applyFilter: () => void;\n  clearFilter: () => void;\n  innerHeight: number;\n  isColorBlind: boolean;\n  questionsShowing: FilterTypes.QuestionsShowing;\n  resetQuestionsShowing: () => void;\n  selectedAnswers: FilterTypes.SelectedAnswers;\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  updateColorBlind: () => void;\n  updateQuestionsShowing: (question: string) => void;\n}\n\ninterface State {}\n\nexport default class Filters extends React.Component<Props, State> {\n  public displayName = \"Filters\";\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <div\n        className=\"filters-main-cont\"\n        style={{ height: this.props.innerHeight }}\n      >\n        <h2 className=\"filters-title\">\n          Filters{\" \"}\n          <button\n            className=\"filters-title-reset-button\"\n            onClick={this.props.resetQuestionsShowing}\n          >\n            Reset Results Showing\n          </button>\n        </h2>\n\n        <div className=\"filters-filters-cont\">\n          {Data.questions.map((question, idx) => (\n            <Filter\n              idx={idx + 1}\n              isColorBlind={this.props.isColorBlind}\n              key={question}\n              questionIsShowing={\n                this.props.questionsShowing[\n                  question as keyof FilterTypes.QuestionsShowing\n                ]\n              }\n              selectedAnswers={\n                this.props.selectedAnswers[\n                  question as keyof FilterTypes.SelectedAnswers\n                ]\n              }\n              type={question as keyof Survey.Response}\n              toggleAnswer={this.props.toggleAnswer}\n              updateQuestionsShowing={this.props.updateQuestionsShowing}\n            />\n          ))}\n        </div>\n        <div className=\"filter-button-cont\">\n          <button\n            className=\"filter-button-clear\"\n            onClick={this.props.clearFilter}\n          >\n            Clear\n          </button>\n          <button className=\"filter-button\" onClick={this.props.applyFilter}>\n            Apply Filter\n          </button>\n          <Checkbox\n            isSelected={this.props.isColorBlind}\n            isColorBlind={true}\n            answer=\"I'm colorblind\"\n            onSelect={(\n              answer: string,\n              isSelected: boolean,\n              type: keyof Survey.Response\n            ) => this.props.updateColorBlind()}\n            style={{ transform: \"scale(0.7)\" }}\n            type={\"expectedTimeTo60\"}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport \"./bargraph.scss\";\n\ninterface Props {\n  answers: { color: string; title: string; value: number }[];\n  totalAnswers: number;\n}\n\ninterface State {}\n\nexport default class BarGraph extends React.Component<Props> {\n  public displayName = \"BarGraph\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this._getLargestNumber = this._getLargestNumber.bind(this)\n    this.getAnswerWidth = this.getAnswerWidth.bind(this);\n  }\n\n  _getLargestNumber(): number {\n    if (!this.props.answers) {\n      return this.props.totalAnswers;\n    }\n\n    const largestNumber = this.props.answers.reduce((curLargestNumber: number, answer) => {\n      return curLargestNumber >= answer.value ? curLargestNumber : answer.value;\n    }, 0);\n\n    return largestNumber + 2 > this.props.totalAnswers ? this.props.totalAnswers : largestNumber + 2;\n  }\n\n  public render() {\n    const topEndNumber = this._getLargestNumber();\n\n    return (\n      <div className=\"bar-graph\">\n        {this.props.answers &&\n          this.props.answers.map(\n            answer =>\n              !!answer.value && (\n                <p\n                  className=\"answer-bar\"\n                  data-content={`${answer.title || \"(No Answer)\"}: ${\n                    answer.value\n                  } (${this.getAnswerWidth(answer, topEndNumber)}%)`}\n                  key={answer.title}\n                  style={{\n                    width: `${this.getAnswerWidth(answer, topEndNumber)}%`,\n                    backgroundColor: answer.color\n                  }}\n                />\n              )\n          )}\n        <p className=\"bar-graph-range\">\n          <span>0</span>\n          <span>{topEndNumber}</span>\n        </p>\n      </div>\n    );\n  }\n\n  getAnswerWidth(answer: { color: string; title: string; value: number }, topEndNumber: number) {\n    return ((answer.value / topEndNumber) * 100).toFixed(2);\n  }\n}\n","\nconst SPECIFIC_REPO = \"little-dragons-survey-results-data/results-data.json\"\nconst DATA_URL = `https://aablain.github.io/${SPECIFIC_REPO}`\n\nexport async function getSurveyData(callback) {\n  const [part1] = await Promise.all([\n    getSurveyDataPart1()\n  ]);\n\n  callback(null, [...part1]);\n}\n\nfunction getSurveyDataPart1() {\n  return new Promise((res, rej) => {\n    var req = new XMLHttpRequest();\n\n    req.addEventListener(\"load\", onDataLoaded);\n    req.addEventListener(\"error\", onFail);\n    req.addEventListener(\"abort\", onFail);\n\n    req.open(\n      \"GET\",\n      DATA_URL\n    );\n    req.send();\n\n    function onDataLoaded(event) {\n      if (req.status >= 400) {\n        onFail(event);\n      } else {\n        var json = JSON.parse(this.responseText);\n        res(json);\n      }\n    }\n\n    function onFail(event) {\n      rej(new Error(\"...\"));\n    }\n  });\n}\n\n// export function getSurveyDataPart2() {\n//   return new Promise((res, rej) => {\n//     var req = new XMLHttpRequest();\n\n//     req.addEventListener(\"load\", onDataLoaded);\n//     req.addEventListener(\"error\", onFail);\n//     req.addEventListener(\"abort\", onFail);\n\n//     req.open(\n//       \"GET\",\n//       \"https://aablain.github.io/classic-survey-results-august-2019/classic-survey-results-august-2019-part-2.json\"\n//     );\n//     req.send();\n\n//     function onDataLoaded(event) {\n//       if (req.status >= 400) {\n//         onFail(event);\n//       } else {\n//         var json = JSON.parse(this.responseText);\n//         res(json);\n//       }\n//     }\n\n//     function onFail(event) {\n//       rej(new Error(\"...\"));\n//     }\n//   });\n// }\n\nexport function objectEntries(obj) {\n  return Object.entries\n    ? Object.entries(obj)\n    : Object.keys(obj).map(key => [key, obj[key]]);\n}\n","import * as React from \"react\";\nimport PieChart from \"react-minimal-pie-chart\";\nimport BarGraph from \"./bargraph\";\nimport { objectEntries } from \"../utils\";\nimport Data from \"../filters/data\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  answerCounts: {\n    [x: string]: number;\n  };\n  question: keyof Survey.Response;\n  totalAnswers: number;\n}\n\ninterface State {\n  counts: {\n    title: string;\n    value: number;\n    color: string;\n  }[];\n  otherCounts: {\n    title: string;\n    value: number;\n    color: string;\n  }[];\n  countsArr?: [string, number][];\n  showOtherAnswers: boolean;\n  showResultDialogue: boolean;\n}\n\nexport default class Result extends React.Component<Props, State> {\n  public displayName = \"Result\";\n\n  constructor(props: Props) {\n    super(props);\n\n    const [counts, otherCounts] = this._pullOtherAnswersOut(props.answerCounts);\n\n    this.state = {\n      // counts: this._getCountsAsArray(props.answerCounts),\n      counts,\n      otherCounts,\n      showOtherAnswers: false,\n      showResultDialogue: false\n      //   countsArr: this._getCountsAssARrayofArrays(props.answerCounts)\n    };\n\n    this._isOtherAnswer = this._isOtherAnswer.bind(this)\n    this._pullOtherAnswersOut = this._pullOtherAnswersOut.bind(this)\n    this.getColor = this.getColor.bind(this);\n    this.getChartType = this.getChartType.bind(this);\n    this.renderBarGraph = this.renderBarGraph.bind(this);\n    this.renderPieChart = this.renderPieChart.bind(this);\n    this.toggleResponseModal = this.toggleResponseModal.bind(this)\n  }\n\n  _getCountsAsArray(answerCounts: {\n    [x: string]: number;\n  }): {\n    title: string;\n    value: number;\n    color: string;\n  }[] {\n    return (objectEntries(answerCounts) as [string, number][]).map(\n      ([key, value], idx) => ({\n        title: key,\n        value,\n        color: this.getColor(idx, key)\n      })\n    );\n  }\n\n  _isOtherAnswer(question: string, answer: string) {\n    if (!Data.hasOthers[question]) {\n      return false;\n    }\n\n    return (Data.answers as { [x: string]: string[] })[question] && !(Data.answers as { [x: string]: string[] })[question].find(ans => ans === answer);\n  }\n\n  _pullOtherAnswersOut(answerCounts: {\n    [x: string]: number;\n  }) {\n    if (!Data.hasOthers[this.props.question as any]) {\n      return [\n        this._getCountsAsArray(answerCounts),\n        []\n      ];\n    }\n\n    const [answers, otherAnswers] = (objectEntries(answerCounts) as [string, number][]).reduce(\n      ([answrs, othAnswrs]: any[][], [key, value], idx) => {\n        if (this._isOtherAnswer(this.props.question, key)) {\n          othAnswrs.push({\n            title: key,\n            value,\n            color: this.getColor(othAnswrs.length, key)\n          } as any);\n        } else {\n          answrs.push({\n            title: key,\n            value,\n            color: this.getColor(answrs.length, key)\n          } as any);\n        }\n      //   return {\n      //   title: key,\n      //   value,\n      //   color: this.getColor(idx, key)\n      // }\n\n      return [answrs, othAnswrs];\n    }, [[], []] as any[][]\n    );\n\n    return [answers, otherAnswers];\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.answerCounts !== prevProps.answerCounts ||\n      this.props.isColorBlind !== prevProps.isColorBlind\n    ) {\n      const [counts, otherCounts] = this._pullOtherAnswersOut(this.props.answerCounts);\n\n      this.setState({\n        // counts: this._getCountsAsArray(this.props.answerCounts)\n        counts,\n        otherCounts\n      });\n    }\n  }\n\n  public render() {\n    const hasOtherAnswers = Data.hasOthers[this.props.question as any];\n\n    return (\n      <div className={`result-cont ${!this.props.totalAnswers && \"no-answers\"}`} id={this.props.question}>\n        <h4 className=\"result-title\">{Data.titles[this.props.question]}?</h4>\n        <div className=\"info-cont\">\n          {this.props.totalAnswers ? (\n            this.getChartType() === \"BarChart\"\n              ? this.renderBarGraph()\n              : this.renderPieChart()\n          ) : (\n            <div>\n              <h3>No Answers</h3>\n            </div>\n          )}\n\n          <ul className=\"stats-list-cont\">\n            {!!this.state.counts.length &&\n              this.state.counts.map(({ color, title, value }) => (\n                <li\n                  className={`result-text${!value ? \" none-match\" : \"\"}`}\n                  key={title}\n                  style={{\n                    color\n                    // textDecoration: !value ? \"line-through\" : \"\"\n                  }}\n                >\n                  <span className=\"result-text-title\">{title || \"(No Answer)\"}:</span>{\" \"}\n                  <span className=\"result-text-value\">\n                    {value} -{\" \"}\n                    <span\n                      className=\"result-text-value-percentage\"\n                      style={{\n                        borderColor: color\n                        // backgroundColor: color\n                      }}\n                    >\n                      {((value / this.props.totalAnswers) * 100).toFixed(2)}%\n                    </span>\n                  </span>\n                </li>\n              ))}\n          </ul>\n\n          {hasOtherAnswers && <div>\n            <button className=\"result-showother-button\" onClick={() => this.setState({ showOtherAnswers: !this.state.showOtherAnswers })}>Show \"Other\" Answers</button>\n          </div>}\n\n          {this.state.showOtherAnswers && (\n            <>\n              {!!this.state.otherCounts.length ? (\n                 <ul className=\"stats-list-cont\">\n                 {this.state.otherCounts.map(({ color, title, value }) => (\n                     <li\n                       className={`result-text${!value ? \" none-match\" : \"\"}`}\n                       key={title}\n                       style={{\n                         color\n                         // textDecoration: !value ? \"line-through\" : \"\"\n                       }}\n                     >\n                       <span className=\"result-text-title\">{title || \"(No Answer)\"}:</span>{\" \"}\n                       <span className=\"result-text-value\">\n                         {value} -{\" \"}\n                         <span\n                           className=\"result-text-value-percentage\"\n                           style={{\n                             borderColor: color\n                             // backgroundColor: color\n                           }}\n                         >\n                           {((value / this.props.totalAnswers) * 100).toFixed(2)}%\n                         </span>\n                       </span>\n                     </li>\n                   ))}\n               </ul>\n              ) : (\n                <div>\n                  <h3>No Answers Fit This Description passing the filter</h3>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  getColor(idx: number, key: string): string {\n    if (this.props.isColorBlind) {\n      return Data.colorBlindColors[idx];\n    }\n\n    /*\n     \"naxx_interest\",\n    \"naxx_cont_class_choice\",\n    \"should_people_roll_different_spec\",\n    \"which_raids_interest\",\n    \"plan_to_take_break\",\n    \"character_name\",\n    \"tryhard_rating\",\n    \"tryhard_rating_explaination\",\n    \"ideal_spec_choices\",\n    \"ideal_prof_choices\",\n    \"secondary_spec_choices\",\n    \"loot_systems_okay_with\",\n    \"ideal_loot_system\",\n    \"raid_days_per_week_count\",\n    \"raid_day_time_slots\",\n    \"interested_in_raid_leading\",\n    \"content_interests\",\n    \"leadership_interests\",\n    \"tbc_guild_wants\",\n    \"tbc_guild_concerns\"\n    */\n\n    const question  = this.props.question as string;\n\n    if (question === \"ideal_spec_choices\" || question === \"secondary_spec_choices\") {\n      return (Data.specColors as { [x: string]: string })[key];\n    }\n\n    return Data.colors[idx];\n  }\n\n  getChartType(): \"PieChart\" | \"BarChart\" {\n    // \"naxx_interest\",\n    // \"naxx_cont_class_choice\",\n    // \"should_people_roll_different_spec\",\n    // \"which_raids_interest\",\n    // \"plan_to_take_break\",\n    // \"character_name\",\n    // \"tryhard_rating\",\n    // \"tryhard_rating_explaination\",\n    // \"ideal_spec_choices\",\n    // \"ideal_prof_choices\",\n    // \"secondary_spec_choices\",\n    // \"loot_systems_okay_with\",\n    // \"ideal_loot_system\",\n    // \"raid_days_per_week_count\",\n    // \"raid_day_time_slots\",\n    // \"interested_in_raid_leading\",\n    // \"content_interests\",\n    // \"leadership_interests\",\n    // \"tbc_guild_wants\",\n    // \"tbc_guild_concerns\"\n    switch (this.props.question as string) {\n      case \"which_raids_interest\":\n      case \"ideal_spec_choices\":\n      case \"ideal_prof_choices\":\n      case \"secondary_spec_choices\":\n      case \"loot_systems_okay_with\":\n      case \"raid_day_time_slots\":\n      case \"leadership_interests\":\n        return \"BarChart\";\n      default:\n        return \"PieChart\";\n    }\n  }\n\n  renderBarGraph() {\n    return (\n      <BarGraph\n        answers={this.state.counts}\n        totalAnswers={this.props.totalAnswers}\n      />\n    );\n  }\n\n  renderPieChart() {\n    const props = {\n      data: this.state.counts,\n      label: label,\n      labelPosition: 114,\n      labelStyle: {\n        fontSize: \"8x\"\n      }\n    };\n\n    // @ts-ignore\n    return <PieChart {...props} />;\n  }\n\n  toggleResponseModal() {\n    this.setState({ showResultDialogue: !this.state.showResultDialogue })\n  }\n}\n\nconst label = (labelProps: {\n  dx: number;\n  dy: number;\n  data: { color: string; percentage: number }[];\n  dataIndex: number;\n  key: string;\n  textAnchor: string;\n  x: number;\n  y: number;\n}) => {\n  const percent = labelProps.data[labelProps.dataIndex].percentage;\n  return (\n    <text\n      className=\"chart-result-percent\"\n      textAnchor={labelProps.textAnchor}\n      alignmentBaseline=\"middle\"\n      dx={labelProps.dx}\n      dy={labelProps.dy}\n      fill={labelProps.data[labelProps.dataIndex].color}\n      key={labelProps.key}\n      x={labelProps.x}\n      y={labelProps.y}\n    >\n      {percent ? `${percent.toFixed(2)}%` : \"\"}\n    </text>\n  );\n};\n","import * as React from 'react';\nimport Data from \"../filters/data\";\nimport { getSurveyData, objectEntries } from \"../utils\";\n\ninterface Props {\n    response: any;\n};\n\nexport default (props: Props) => {\n    const [responseAsArr, updateAsArr] = React.useState(objectEntries(props.response));\n\n    React.useEffect(() => {\n        updateAsArr(objectEntries(props.response));\n    }, [props.response]);\n\n    if (!responseAsArr) {\n        return (\n            <h3>Data not found??</h3>\n        );\n    }\n\n    return (\n      <div className='result-person-response'>\n          <h2 className=\"result-person-response-name\">{props.response && props.response.character_name}</h2>\n          <ul className='result-person-response-questions-list'>\n            {responseAsArr.map(([question, answer]) => (\n                <li className='result-person-response-question-item'>\n                    <span  className='result-person-response-question-title'>{Data.titles[question]}</span>\n                    {answerText(question, answer)}\n                </li>\n            ))}\n          </ul>\n      </div>\n  )\n}\n\nfunction answerText(questionKey: string, answer: string) {\n    if (\n        questionKey === \"which_raids_interest\" ||\n        questionKey === \"ideal_prof_choices\" ||\n        questionKey === \"ideal_spec_choices\" ||\n        questionKey === \"secondary_spec_choices\" ||\n        questionKey === \"loot_systems_okay_with\" ||\n        questionKey === \"raid_day_time_slots\" ||\n        questionKey === \"content_interests\" ||\n        questionKey === \"leadership_interests\"\n      ) {\n          const subAnswers = answer.split(\";\");\n\n          return (\n              <ul>\n                  {subAnswers.map(subAnswer => (\n                    <li className=\"result-person-response-question-answer\">{subAnswer || \"(No Answer)\"}</li>\n                  ))}\n              </ul>\n          );\n      } else {\n          return (\n              <ul>\n                  <li className=\"result-person-response-question-answer\">{answer || \"(No Answer)\"}</li>\n              </ul>\n          );\n      }\n}","import * as React from \"react\";\nimport Modal from \"react-modal\";\nimport Data from \"../filters/data\";\nimport Result from \"./result\";\nimport SurveyResponse from \"./surveyResponse\";\nimport { FilterTypes, Survey } from \"../typings\";\nimport { objectEntries } from \"../utils\";\n\nModal.setAppElement(\"#modal-anchor\");\n\nimport \"./styles.scss\";\nimport data from \"../filters/data\";\n\ninterface Props {\n  activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  answerCounts: FilterTypes.AnswersCounts;\n  computedResponsesLength: number;\n  allResponsesCount: number;\n  innerHeight: number;\n  isColorBlind: boolean;\n  questionsShowing: FilterTypes.QuestionsShowing;\n  responsesByPersonName: {\n    [x: string]: any;\n  };\n  updateFilterLive: (category: keyof Survey.Response, filter: string) => void;\n}\n\nexport default (props: Props) => {\n  const [showResultDialogue, updateShowResultDialogue] = React.useState(false);\n  const [surveyResponse, updateSurveyResponse] = React.useState<any>(undefined);\n\n  const filtersLength = !!props.activeFilters ? props.activeFilters.length : 0;\n  const characterNames = objectEntries((props.answerCounts as any).character_name).filter(([name, count]) => !!count && !!name && name !== \"Other\").map(([name]) => name);\n\n  return (\n    <div className=\"results-main-cont\" style={{ height: props.innerHeight }}>\n      <h1 className=\"results-title\">Results</h1>\n      <h3 className=\"results-subtitle\">\n        {props.computedResponsesLength} Responses match your filters,\n        Representing{\" \"}\n        {(\n          (props.computedResponsesLength / props.allResponsesCount) *\n          100\n        ).toFixed(2)}\n        % of respondees\n      </h3>\n      {props.activeFilters && !!props.activeFilters.length && (\n        <p>\n          Filtering for{\" \"}\n          {props.activeFilters.map(([category, catFilters], catIdx) => {\n            return (\n              <React.Fragment key={category}>\n                <span\n                  style={{\n                    color: props.isColorBlind\n                      ? data.colorBlindColors[catIdx]\n                      : data.colors[catIdx]\n                  }}\n                >\n                  {catFilters.map((filter, idx) => <React.Fragment key={filter}>{\" \"}<span className=\"results-subtitle-filter-opt\" style={{\n                    backgroundColor: props.isColorBlind\n                      ? data.colorBlindColors[catIdx]\n                      : data.colors[catIdx]\n                  }}>{filter} <span className=\"results-subtitle-filter-remove-btn\" role=\"button\" onClick={() => props.updateFilterLive(category, filter)}>x</span></span></React.Fragment>\n                  )}{\" \"}\n                </span>{\" \"}\n                {catIdx + 1 !== filtersLength ? \" and \" : \"\"}\n              </React.Fragment>\n            );\n          })}\n        </p>\n      )}\n      <div className=\"results-results-cont\">\n        {Data.questions.map((questionKey, idx) =>\n          props.questionsShowing[\n            questionKey as keyof FilterTypes.QuestionsShowing\n          ] ? (\n            <Result\n              idx={idx}\n              isColorBlind={props.isColorBlind}\n              key={questionKey}\n              question={questionKey as keyof Survey.Response}\n              answerCounts={\n                props.answerCounts[questionKey as keyof Survey.Response]\n              }\n              totalAnswers={props.computedResponsesLength}\n            />\n          ) : (\n            <span key={questionKey} />\n          )\n        )}\n\n        <section className=\"results-results-people-list-cont\">\n          <ul className=\"results-results-people-list\">\n            {characterNames.map(personName =>  (\n              <li className=\"results-results-people-list-name\" key={`peoplelist-${personName}`}>\n                <button className=\"results-results-people-list-name-btn\" onClick={() => {\n                  const response = props.responsesByPersonName[personName];\n\n                  updateSurveyResponse(response);\n                  updateShowResultDialogue(true);\n                }}>\n                  {personName}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </section>\n      </div>\n\n      <Modal\n        isOpen={showResultDialogue}\n        onRequestClose={() => updateShowResultDialogue(false)}\n        contentLabel=\"Survey Response\"\n        className=\"result-survey-response-modal\"\n      >\n        <SurveyResponse response={surveyResponse} />\n      </Modal>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport Filters from \"./filters/\";\nimport Results from \"./results/\";\nimport Data from \"./filters/data\";\nimport { FilterTypes, Survey } from \"./typings\";\nimport { getSurveyData, objectEntries } from \"./utils\";\n\ninterface Props {}\n\ninterface State {\n  // activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  // answerCounts: FilterTypes.AnswersCounts;\n  // answers: FilterTypes.SelectedAnswers;\n  activeFilters?: [string, string[]][];\n  answerCounts: {\n    [x: string]: {\n      [x: string]: number;\n    };\n  };\n  answers: {\n    [x: string]: {\n      [x: string]: boolean;\n    };\n  };\n  computedResponsesLength: number;\n  failedToLoad?: boolean;\n  filtering: boolean;\n  innerHeight: number;\n  isMobile: boolean;\n  isColorBlind: boolean;\n  loaded: boolean;\n  // questionsShowing: FilterTypes.QuestionsShowing;\n  questionsShowing: {\n    [x: string]: boolean;\n  };\n  responses: {\n    [x: string]: string | number;\n  }[];\n  responsesByPersonName: {\n    [x: string]: any;\n  };\n  showFilters: boolean;\n}\n\nconst QUESTIONS_KEYS = [\n  // \"timestamp\",\n    \"naxx_interest\",\n    \"naxx_cont_class_choice\",\n    \"should_people_roll_different_spec\",\n    \"which_raids_interest\",\n    \"plan_to_take_break\",\n    \"character_name\",\n    \"tryhard_rating\",\n    \"tryhard_rating_explaination\",\n    \"ideal_spec_choices\",\n    \"ideal_prof_choices\",\n    \"secondary_spec_choices\",\n    \"loot_systems_okay_with\",\n    \"ideal_loot_system\",\n    \"raid_days_per_week_count\",\n    \"raid_day_time_slots\",\n    \"interested_in_raid_leading\",\n    \"content_interests\",\n    \"leadership_interests\",\n    \"tbc_guild_wants\",\n    \"tbc_guild_concerns\"\n];\n\nconst answersBlank = QUESTIONS_KEYS.reduce((accum: { [x: string]: Object; }, key) => {\n  accum[key] = {};\n\n  return accum;\n}, {});\n\nconst defaultShowingQuestions = QUESTIONS_KEYS.reduce((accum: { [x: string]: boolean; }, key) => {\n  accum[key] = true;\n\n  if (key === \"timestamp\" || key === \"plan_to_take_break\" || key === \"character_name\" || key === \"tryhard_rating_explaination\" || key === \"tbc_guild_wants\" || key === \"tbc_guild_concerns\") {\n    accum[key] = false;\n  }\n\n  return accum;\n}, {})\n\nexport default class Wrapper extends React.Component<Props, State> {\n  public displayName = \"Wrapper\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      answers: {\n        ...answersBlank\n      } as any,\n      answerCounts: this._calcAnswerQuantities([]) as any,\n      computedResponsesLength: 0,\n      filtering: false,\n      innerHeight: window.innerHeight,\n      isMobile: window.innerWidth < 480,\n      isColorBlind: false,\n      loaded: false,\n      questionsShowing: {\n        ...defaultShowingQuestions\n      },\n      responses: [],\n      responsesByPersonName: [],\n      showFilters: window.innerWidth > 480\n    };\n\n    this._calcAnswerQuantities = this._calcAnswerQuantities.bind(this);\n    this._filterResults = this._filterResults.bind(this);\n    this._isOtherAnswer = this._isOtherAnswer.bind(this)\n    this._getAnswersTemplate = this._getAnswersTemplate.bind(this);\n    this.applyFilter = this.applyFilter.bind(this);\n    this.clearFilter = this.clearFilter.bind(this);\n    this.resetQuestionsShowing = this.resetQuestionsShowing.bind(this);\n    this.toggleAnswerFilter = this.toggleAnswerFilter.bind(this);\n    this.updateQuestionShowing = this.updateQuestionShowing.bind(this);\n    this.updateFilterLive = this.updateFilterLive.bind(this);\n  }\n\n  _calcAnswerQuantities(responses: Survey.Response[]) {\n    const answerCounts = responses.reduce((accum, response) => {\n      // debugger;\n      const respAsArray = objectEntries(response);\n\n      respAsArray.forEach(([questionKey, ans]: string[]) => {\n        if (questionKey === \"timestamp\") {\n          return accum;\n        }\n\n        const answer = `${ans}`;\n\n        if (\n          questionKey === \"which_raids_interest\" ||\n          questionKey === \"ideal_prof_choices\" ||\n          questionKey === \"ideal_spec_choices\" ||\n          questionKey === \"secondary_spec_choices\" ||\n          questionKey === \"loot_systems_okay_with\" ||\n          questionKey === \"raid_day_time_slots\" ||\n          questionKey === \"content_interests\" ||\n          questionKey === \"leadership_interests\"\n        ) {\n          const subAnswers = answer.split(\";\");\n\n          subAnswers.forEach(subAnswer => {\n            if (Data.hasOthers[questionKey] && subAnswer && subAnswer !== \"Other\" && this._isOtherAnswer(questionKey, subAnswer)) {\n              if (!(accum as any)[questionKey][\"Other\"]) {\n                (accum as any)[questionKey][\"Other\"] = 1;\n              } else {\n                (accum as any)[questionKey][\"Other\"]++;\n              }\n            }\n\n            if (!accum[questionKey as keyof Survey.Response][subAnswer]) {\n              accum[questionKey as keyof Survey.Response][subAnswer] = 1;\n            } else {\n              accum[questionKey as keyof Survey.Response][subAnswer]++;\n            }\n          });\n        } else {\n          if (Data.hasOthers[questionKey] && answer && answer !== \"Other\" && this._isOtherAnswer(questionKey, answer)) {\n            if (!(accum as any)[questionKey][\"Other\"]) {\n              (accum as any)[questionKey][\"Other\"] = 1;\n            } else {\n              (accum as any)[questionKey][\"Other\"]++;\n            }\n          }\n\n          if (!accum[questionKey as keyof Survey.Response][answer]) {\n            accum[questionKey as keyof Survey.Response][answer] = 1;\n          } else {\n            accum[questionKey as keyof Survey.Response][answer]++;\n          }\n        }\n\n        return accum;\n      });\n\n      return accum;\n    }, this._getAnswersTemplate());\n\n    return answerCounts;\n  }\n\n  _getAnswersTemplate() {\n    return objectEntries(Data.answers).reduce(\n      (accum, [q, answers]) => {\n        accum[q as keyof FilterTypes.AnswersCounts] = {};\n        answers.forEach((a: string) => {\n          accum[q as keyof FilterTypes.AnswersCounts][a] = 0;\n        });\n        return accum;\n      },\n      {} as FilterTypes.AnswersCounts\n    );\n  }\n\n  _filterResults(results: Survey.Response[]) {\n    return results.filter(\n      item =>\n        Data.factions[item.faction][item.class] &&\n        Data.races[item.race][item.class] &&\n        Data.factionRaces[item.faction][item.race]\n    );\n  }\n\n  _getSurveyResults() {\n    getSurveyData((error: Error | null, responses: Survey.Response[]) => {\n      if (error) {\n        this.setState({ failedToLoad: true });\n        return;\n      }\n\n      // debugger;\n\n      // const filteredResps = this._filterResults(responses);\n      const filteredResps = responses;\n      const responsesByPersonName = responses.reduce((accum: any, resp: any) => {\n        if (!resp.character_name) {\n          return accum;\n        }\n\n        accum[resp.character_name] = resp;\n\n        return accum;\n      }, {});\n\n      const answerCounts: any = this._calcAnswerQuantities(filteredResps);\n      this.setState({\n        answerCounts,\n        computedResponsesLength: filteredResps.length,\n        responses: filteredResps as any,\n        responsesByPersonName,\n        loaded: true\n      });\n    });\n  }\n\n  _isOtherAnswer(question: string, answer: string) {\n    if (!Data.hasOthers[question]) {\n      return false;\n    }\n\n    return (Data.answers as { [x: string]: string[] })[question] && !(Data.answers as { [x: string]: string[] })[question].find(ans => ans === answer);\n  }\n\n  _setHeight() {\n    // @ts-ignore\n    if (this.timeoutID) {\n      // @ts-ignore\n      clearTimeout(this.timeoutID);\n    }\n\n    // @ts-ignore\n    this.timeoutID = setTimeout(() => {\n      this.setState({ innerHeight: window.innerHeight });\n    }, 300);\n  }\n\n  componentDidMount() {\n    this._getSurveyResults();\n    window.addEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  public render() {\n    if (this.state.failedToLoad) {\n      return (\n        <div className=\"main-wrapper\">Survey Results Failed to load :(</div>\n      );\n    }\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"loading-cont \">\n          <h1 className=\"loading-message\">Loadin' that sweet, sweet data...</h1>\n          <h4 className=\"loading-message-sub\">That means Survey Results</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"main-wrapper\">\n        {this.state.isMobile && (\n          <button\n            className=\"filters-toggle\"\n            onClick={() =>\n              this.setState({ showFilters: !this.state.showFilters })\n            }\n          >\n            {this.state.showFilters ? \"Hide\" : \"Filters\"}\n          </button>\n        )}\n\n        {this.state.showFilters && (\n          <Filters\n            applyFilter={this.applyFilter}\n            clearFilter={this.clearFilter}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n            questionsShowing={this.state.questionsShowing as any}\n            resetQuestionsShowing={this.resetQuestionsShowing}\n            selectedAnswers={this.state.answers as any}\n            toggleAnswer={this.toggleAnswerFilter}\n            updateColorBlind={() =>\n              this.setState({ isColorBlind: !this.state.isColorBlind })\n            }\n            updateQuestionsShowing={this.updateQuestionShowing}\n          />\n        )}\n\n        {this.state.answerCounts && (\n          <Results\n            answerCounts={this.state.answerCounts as any}\n            activeFilters={this.state.activeFilters as any}\n            computedResponsesLength={this.state.computedResponsesLength}\n            allResponsesCount={this.state.responses.length}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n            questionsShowing={this.state.questionsShowing as any}\n            responsesByPersonName={this.state.responsesByPersonName}\n            updateFilterLive={this.updateFilterLive}\n          />\n        )}\n      </div>\n    );\n  }\n\n  applyFilter() {\n    this.setState({ filtering: true }, () => {\n      const { answers } = this.state;\n\n      const questionsWithFilters = this.getFilters(answers as any);\n\n      if (!questionsWithFilters.length) {\n        return this.setState({\n          activeFilters: [],\n          filtering: false,\n          answerCounts: this._calcAnswerQuantities(this.state\n            .responses as any[]) as any,\n          computedResponsesLength: (this.state.responses as any[])\n            .length\n        });\n      }\n\n      const computedResponses = this.getFilteredResponses(\n        (this.state.responses as any[]) || [],\n        questionsWithFilters\n      );\n      const answerCounts: any = this._calcAnswerQuantities(computedResponses);\n\n      this.setState({\n        activeFilters: questionsWithFilters,\n        answerCounts,\n        filtering: false,\n        computedResponsesLength: computedResponses.length\n      });\n    });\n  }\n\n  clearFilter() {\n    this.setState({\n      answers: {\n        ...answersBlank as any\n      }\n    });\n  }\n\n  getFilters(\n    answers: FilterTypes.SelectedAnswers\n  ): [keyof Survey.Response, Survey.AllAnswers[]][] {\n    return objectEntries(answers).reduce(\n      (accum, [questionKey, selectedAnswers]) => {\n        const filteredAnswers = objectEntries(selectedAnswers as {\n          [x: string]: boolean;\n        })\n          .filter(([__, isSelected]) => isSelected)\n          .map(([answer]) => answer);\n\n        if (filteredAnswers.length) {\n          // @ts-ignore\n          return accum.concat([[questionKey, filteredAnswers]]);\n        }\n\n        return accum;\n      },\n      []\n    );\n  }\n\n  getFilteredResponses(\n    responses: Survey.Response[],\n    filters: [keyof Survey.Response, Survey.AllAnswers[]][]\n  ) {\n    return responses.filter(response => {\n      return filters.every(([questionKey, selectedAnswers]) => {\n        return (selectedAnswers as string[]).some(selectedAnswer => {\n          if (\n            (questionKey as string) === \"which_raids_interest\" ||\n            (questionKey as string) === \"ideal_spec_choices\" ||\n          (questionKey as string) === \"ideal_prof_choices\" ||\n          (questionKey as string) === \"secondary_spec_choices\" ||\n          (questionKey as string) === \"loot_systems_okay_with\" ||\n          (questionKey as string) === \"raid_day_time_slots\" ||\n          (questionKey as string) === \"content_interests\" ||\n          (questionKey as string) === \"leadership_interests\"\n          ) {\n            // @ts-ignore\n            return response[questionKey].includes(selectedAnswer);\n          } else if ((questionKey as string) === \"naxx_interest\" || (questionKey as string) === \"tryhard_rating\" || (questionKey as string) === \"raid_days_per_week_count\") {\n            if ((questionKey as string) === \"naxx_interest\") {\n              if (selectedAnswer === \"3\") {\n                return (response[questionKey] as any as number) >= 3;\n              }\n            }\n\n            return `${response[questionKey]}` === selectedAnswer\n          }\n\n          return response[questionKey] === selectedAnswer;\n        });\n      });\n    });\n  }\n\n  resetQuestionsShowing() {\n    this.setState({\n      questionsShowing: {\n        ...defaultShowingQuestions\n      }\n    });\n  }\n\n  toggleAnswerFilter(\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response,\n    callback?: () => void\n  ) {\n    const updatedSection = {\n      ...this.state.answers[type],\n      [answer]: !isSelected\n    };\n\n    this.setState(\n      {\n        answers: { ...this.state.answers, [type]: updatedSection }\n      },\n      () => {\n        if (callback) {\n          callback();\n        }\n      }\n    );\n  }\n\n  updateQuestionShowing(question: string) {\n    this.setState({\n      questionsShowing: {\n        ...this.state.questionsShowing,\n        [question]: !this.state.questionsShowing[\n          question as keyof FilterTypes.QuestionsShowing\n        ]\n      }\n    });\n  }\n\n  updateFilterLive(category: keyof Survey.Response, filter: string) {\n    this.toggleAnswerFilter(filter, true, category, () => this.applyFilter());\n  }\n}\n","import React, { Component } from \"react\";\nimport AppWrapper from \"./AppWrapper\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\"> */}\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n        {/* </header> */}\n        <AppWrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}